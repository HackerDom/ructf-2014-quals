#!/usr/bin/python2
# -*- coding: utf-8 -*-

from __future__ import print_function
from bitcoinrpc.authproxy import AuthServiceProxy
import sys

import random
import hashlib
from os.path import join, abspath, dirname

ADDRESSESFILE = join(abspath(dirname(__file__)), 'addrs')

CATEGORY = 'crypto'
SCORE = 400
NAME = "RuCTFCoin"

HTML_EN = ''' Check out our new cryptocurrency https://github.com/HackerDom/bitcoin <br/>Mine and send us 100 coins to {} address and we'll score you points. You can use ANYTHING as an answer. For example, hash of money transfer transaction. '''
HTML_RU = ''' Зацените нашу новейшую криптовалюту https://github.com/HackerDom/bitcoin <br/>Намайните и пошлите нам 100 монет на адрес {} и мы начислим вам очки. В качестве ответа можете использовать ЛЮБОЕ значние. Например, хеш транзакции перевода нам монет. '''

# Force utf8 output
# sys.stdout = open(1, 'w', encoding='utf-8', closefd=False)

if len(sys.argv) < 2:
    print("You need to provide at least one argument", file=sys.stderr)
    exit(1)

action = sys.argv[1].lower()


def crete_task(team_id):
    global HTML_EN, HTML_RU
    address = list(open(ADDRESSESFILE))[team_id]

    HTML_EN = HTML_EN.format(address)
    HTML_RU = HTML_RU.format(address)


def check_task(team_id):
    address = list(open(ADDRESSESFILE))[team_id]
    proxy = AuthServiceProxy("http://bitcoinrpc:8bY3PJ1jQ2cXqFiQGMiyawJNnBmUFMti6A8Gr9m1XBgm@172.16.16.13:28332")
    coins = proxy.getreceivedbyaddress(address)
    print(coins)
    return coins >= 100


if action == 'id':
    print("{}:{}".format(CATEGORY, SCORE))
elif action == 'series':
    print(CATEGORY)
elif action == 'name':
    print(NAME)
elif action == 'create':
    dump_dir = sys.argv[2]
    team_id = int(sys.argv[3])
    crete_task(team_id)
    print("ID:" + str(team_id))
    print("html[en]:{}".format(HTML_EN))
    print("html[ru]:{}".format(HTML_RU))    
elif action == 'user':
    dump_dir = sys.argv[2]
    quid = int(sys.argv[3])
    status = check_task(quid)
    stat = 0 if status else 1
    print("Exiting with " + str(status))
    exit(stat)
else:
    print("No such action: '{}' available actions are: id, series, name, create, user".format(action), file=sys.stderr)
    exit(1)

exit(0)