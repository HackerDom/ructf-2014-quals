#!/usr/bin/perl
use strict;
use Digest::MD5 qw(md5_hex);

################### Config ###################

my $TRY_COUNT    = 70;
my $NAME         = 'hw_reverse';
my $SERIES       = 'hardware';
my $SCORE        = 200;
my $TASK_ANSWER  = '9831';
my $FILE         = 'static/hw_reverse.79377a87bcbe15a55d5b04fe5b8778eb.zip';

##############################################

$\=$/;

my $Cmd = shift or die "Error: give command as first argument\n";

if ($Cmd eq 'id') {
    print "$SERIES:$SCORE";
    exit 0;
}

if ($Cmd eq 'series') {
    print $SERIES;
    exit 0;
}

if ($Cmd eq 'name') {
    print $NAME;
    exit 0;
}

if ($Cmd eq 'create') {
    my ($DumpDir, $TeamId) = @ARGV;
    print "ID: ".newid($TeamId);
    print "html[en]: <div>What is the shortest valid PIN code?<a href='$FILE'>Files</a></div>";
    print "html[ru]: <div>Какой самый краткий верный код? <a href='$FILE'>Файлы</a></div>";
    exit 0;
}

if ($Cmd eq 'user') {
    my ($DumpDir, $QuestId) = @ARGV;
    my $teamId = (split /-/,$QuestId)[0];
    
    my $tryCount = GetTryCount($DumpDir,$teamId);
    if ($tryCount <= 0) {
        print "You have 0 attempts left";
        exit 1;
    }
    SetTryCount($DumpDir,$teamId,--$tryCount);
    
    chomp(my $answer = <STDIN>);    
    if ($answer eq $TASK_ANSWER) {
        print "Correct!";
        exit 0;
    }
    else {
        print "Incorrect. You have $tryCount attempts left";
        exit 1;
    }
}

die "Unknown command: $Cmd\n";

sub newid {
    my $team = shift;
    my @ch = split //,'1234567890abcdef';
    return sprintf "%d-%s", $team, join '', map{$ch[int rand @ch]} 1..20;
}

sub GetTryCount {
    my ($dir,$team) = @_;
    my $fname = "$dir/$team";
    SetTryCount($dir,$team,$TRY_COUNT) unless -f $fname;
    open F, $fname or die "Error: cannot get try count for team $team\n";
    chomp(my $count = <F>);
    close F;
    return int $count;
}

sub SetTryCount {
    my ($dir,$team,$count) = @_;
    open F, ">$dir/$team" or die "Error: cannot set try count for team $team\n";
    print F $count;
    close F;
}
