I have encrypted 2 consecutive very-very secret and urgent numbers and you've got my cryptograms:
c1 = 60002319039193972817448079469954588703037040537494834888132396601867638888486648024579945206430549307011604982075312968627354130062140776977143942314263846048220262692887594818437662488556389132094227461841805990145182898472515924651322209063382504522480167398896731999250655202235238546766574964020749166677
c2 = 95532755187723709094020007176203909227111105959674581919241776404204576921639614613373629262390193341404486925898218840133427506204187573037201648308426880696584528026765416249945642143778132462028867460113465891399426752496978082533061456410626798263048578962512137765100853088744606860928093234709609986149

Also my crypto-system params were:

n = 116670767481034788387624433424101624406720661538965813122206919317877222388112757499902649149707474671950813539201166777704463866196102240137444508451635857552215778547316136311453429610789702274227385083406117077587548609067040924247497225095087359473233494515501474238670428220731538237787575492195459794549
e = 23

And I did encryption like this:
---------------------------------
K = RSA.generate(1024, e=23)
m1 = randint(2, 10**20)
m2 = m1 + 1
c1, = K.encrypt(m1, 1)
c2, = K.encrypt(m2, 1)
---------------------------------
Reveal m1 and m2.
P.S. May be you'll find awesome module "sage". Handy example can be found in example.sage
to run it: "sage yourfile.sage"
P.P.S. If you are looking for solution, you can get sage here (http://www.sagemath.org/). If you have regenerated the task - you should fill your values into c.sage.